/*
 * This file is generated by jOOQ.
*/
package ua.ddovgal.brainshareApi.jooq.tables;


import org.jooq.*;
import org.jooq.impl.TableImpl;
import org.jooq.types.UInteger;
import ua.ddovgal.brainshareApi.jooq.BrainshareDev;
import ua.ddovgal.brainshareApi.jooq.Keys;
import ua.ddovgal.brainshareApi.jooq.tables.records.RSectionRecord;

import javax.annotation.Generated;
import java.util.Arrays;
import java.util.List;


/**
 * This class is generated by jOOQ.
 */
@Generated(
        value = {
                "http://www.jooq.org",
                "jOOQ version:3.9.1"
        },
        comments = "This class is generated by jOOQ"
)
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class TSection extends TableImpl<RSectionRecord> {

    /**
     * The reference instance of <code>brainshare_dev.section</code>
     */
    public static final TSection SECTION = new TSection();
    private static final long serialVersionUID = 1219121983;
    /**
     * The column <code>brainshare_dev.section.id</code>.
     */
    public final TableField<RSectionRecord, UInteger> ID = createField("id", org.jooq.impl.SQLDataType.INTEGERUNSIGNED.nullable(false), this, "");
    /**
     * The column <code>brainshare_dev.section.super_section_id</code>.
     */
    public final TableField<RSectionRecord, UInteger> SUPER_SECTION_ID = createField("super_section_id", org.jooq.impl.SQLDataType.INTEGERUNSIGNED, this, "");
    /**
     * The column <code>brainshare_dev.section.section_name</code>.
     */
    public final TableField<RSectionRecord, String> SECTION_NAME = createField("section_name", org.jooq.impl.SQLDataType.VARCHAR.length(255).nullable(false), this, "");
    /**
     * The column <code>brainshare_dev.section.description</code>.
     */
    public final TableField<RSectionRecord, String> DESCRIPTION = createField("description", org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * Create a <code>brainshare_dev.section</code> table reference
     */
    public TSection() {
        this("section", null);
    }

    /**
     * Create an aliased <code>brainshare_dev.section</code> table reference
     */
    public TSection(String alias) {
        this(alias, SECTION);
    }

    private TSection(String alias, Table<RSectionRecord> aliased) {
        this(alias, aliased, null);
    }

    private TSection(String alias, Table<RSectionRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * The class holding records for this type
     */
    @Override
    public Class<RSectionRecord> getRecordType() {
        return RSectionRecord.class;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return BrainshareDev.BRAINSHARE_DEV;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<RSectionRecord, UInteger> getIdentity() {
        return Keys.IDENTITY_SECTION;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<RSectionRecord> getPrimaryKey() {
        return Keys.KEY_SECTION_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<RSectionRecord>> getKeys() {
        return Arrays.<UniqueKey<RSectionRecord>>asList(Keys.KEY_SECTION_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<RSectionRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<RSectionRecord, ?>>asList(Keys.FK_SECTION_POSSIBLE_SUPER_SECTION_ID);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TSection as(String alias) {
        return new TSection(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public TSection rename(String name) {
        return new TSection(name, null);
    }
}
