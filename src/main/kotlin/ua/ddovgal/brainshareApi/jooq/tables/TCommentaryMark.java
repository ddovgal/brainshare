/*
 * This file is generated by jOOQ.
*/
package ua.ddovgal.brainshareApi.jooq.tables;


import org.jooq.*;
import org.jooq.impl.TableImpl;
import org.jooq.types.ULong;
import ua.ddovgal.brainshareApi.jooq.BrainshareDev;
import ua.ddovgal.brainshareApi.jooq.Keys;
import ua.ddovgal.brainshareApi.jooq.tables.records.RCommentaryMarkRecord;

import javax.annotation.Generated;
import java.util.Arrays;
import java.util.List;


/**
 * This class is generated by jOOQ.
 */
@Generated(
        value = {
                "http://www.jooq.org",
                "jOOQ version:3.9.1"
        },
        comments = "This class is generated by jOOQ"
)
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class TCommentaryMark extends TableImpl<RCommentaryMarkRecord> {

    /**
     * The reference instance of <code>brainshare_dev.commentary_mark</code>
     */
    public static final TCommentaryMark COMMENTARY_MARK = new TCommentaryMark();
    private static final long serialVersionUID = -1700137662;
    /**
     * The column <code>brainshare_dev.commentary_mark.commentary_id</code>.
     */
    public final TableField<RCommentaryMarkRecord, ULong> COMMENTARY_ID = createField("commentary_id", org.jooq.impl.SQLDataType.BIGINTUNSIGNED.nullable(false), this, "");
    /**
     * The column <code>brainshare_dev.commentary_mark.setter_user_id</code>.
     */
    public final TableField<RCommentaryMarkRecord, ULong> SETTER_USER_ID = createField("setter_user_id", org.jooq.impl.SQLDataType.BIGINTUNSIGNED.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.BIGINTUNSIGNED)), this, "");
    /**
     * The column <code>brainshare_dev.commentary_mark.is_up_mark</code>.
     */
    public final TableField<RCommentaryMarkRecord, Byte> IS_UP_MARK = createField("is_up_mark", org.jooq.impl.SQLDataType.TINYINT.nullable(false), this, "");

    /**
     * Create a <code>brainshare_dev.commentary_mark</code> table reference
     */
    public TCommentaryMark() {
        this("commentary_mark", null);
    }

    /**
     * Create an aliased <code>brainshare_dev.commentary_mark</code> table reference
     */
    public TCommentaryMark(String alias) {
        this(alias, COMMENTARY_MARK);
    }

    private TCommentaryMark(String alias, Table<RCommentaryMarkRecord> aliased) {
        this(alias, aliased, null);
    }

    private TCommentaryMark(String alias, Table<RCommentaryMarkRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * The class holding records for this type
     */
    @Override
    public Class<RCommentaryMarkRecord> getRecordType() {
        return RCommentaryMarkRecord.class;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return BrainshareDev.BRAINSHARE_DEV;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<RCommentaryMarkRecord> getPrimaryKey() {
        return Keys.KEY_COMMENTARY_MARK_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<RCommentaryMarkRecord>> getKeys() {
        return Arrays.<UniqueKey<RCommentaryMarkRecord>>asList(Keys.KEY_COMMENTARY_MARK_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<RCommentaryMarkRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<RCommentaryMarkRecord, ?>>asList(Keys.FK_COMMENTARY_MARK_COMMENTARY_ID, Keys.FK_COMMENTARY_MARK_SETTER_USER_ID);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TCommentaryMark as(String alias) {
        return new TCommentaryMark(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public TCommentaryMark rename(String name) {
        return new TCommentaryMark(name, null);
    }
}
