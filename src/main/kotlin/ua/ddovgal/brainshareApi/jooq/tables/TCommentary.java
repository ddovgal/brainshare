/*
 * This file is generated by jOOQ.
*/
package ua.ddovgal.brainshareApi.jooq.tables;


import org.jooq.*;
import org.jooq.impl.TableImpl;
import org.jooq.types.UInteger;
import org.jooq.types.ULong;
import ua.ddovgal.brainshareApi.jooq.BrainshareDev;
import ua.ddovgal.brainshareApi.jooq.Keys;
import ua.ddovgal.brainshareApi.jooq.tables.records.RCommentaryRecord;

import javax.annotation.Generated;
import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;


/**
 * This class is generated by jOOQ.
 */
@Generated(
        value = {
                "http://www.jooq.org",
                "jOOQ version:3.9.1"
        },
        comments = "This class is generated by jOOQ"
)
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class TCommentary extends TableImpl<RCommentaryRecord> {

    /**
     * The reference instance of <code>brainshare_dev.commentary</code>
     */
    public static final TCommentary COMMENTARY = new TCommentary();
    private static final long serialVersionUID = 9110624;
    /**
     * The column <code>brainshare_dev.commentary.id</code>.
     */
    public final TableField<RCommentaryRecord, ULong> ID = createField("id", org.jooq.impl.SQLDataType.BIGINTUNSIGNED.nullable(false), this, "");
    /**
     * The column <code>brainshare_dev.commentary.author_user_id</code>.
     */
    public final TableField<RCommentaryRecord, ULong> AUTHOR_USER_ID = createField("author_user_id", org.jooq.impl.SQLDataType.BIGINTUNSIGNED.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.BIGINTUNSIGNED)), this, "");
    /**
     * The column <code>brainshare_dev.commentary.material_id</code>.
     */
    public final TableField<RCommentaryRecord, ULong> MATERIAL_ID = createField("material_id", org.jooq.impl.SQLDataType.BIGINTUNSIGNED.nullable(false), this, "");
    /**
     * The column <code>brainshare_dev.commentary.parent_commentary_id</code>.
     */
    public final TableField<RCommentaryRecord, ULong> PARENT_COMMENTARY_ID = createField("parent_commentary_id", org.jooq.impl.SQLDataType.BIGINTUNSIGNED, this, "");
    /**
     * The column <code>brainshare_dev.commentary.ratio</code>.
     */
    public final TableField<RCommentaryRecord, Integer> RATIO = createField("ratio", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");
    /**
     * The column <code>brainshare_dev.commentary.positive_mark_count</code>.
     */
    public final TableField<RCommentaryRecord, UInteger> POSITIVE_MARK_COUNT = createField("positive_mark_count", org.jooq.impl.SQLDataType.INTEGERUNSIGNED.nullable(false), this, "");
    /**
     * The column <code>brainshare_dev.commentary.negative_mark_count</code>.
     */
    public final TableField<RCommentaryRecord, UInteger> NEGATIVE_MARK_COUNT = createField("negative_mark_count", org.jooq.impl.SQLDataType.INTEGERUNSIGNED.nullable(false), this, "");
    /**
     * The column <code>brainshare_dev.commentary.creation_datetime</code>.
     */
    public final TableField<RCommentaryRecord, Timestamp> CREATION_DATETIME = createField("creation_datetime", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "");
    /**
     * The column <code>brainshare_dev.commentary.content_data_id</code>.
     */
    public final TableField<RCommentaryRecord, ULong> CONTENT_DATA_ID = createField("content_data_id", org.jooq.impl.SQLDataType.BIGINTUNSIGNED.nullable(false), this, "");

    /**
     * Create a <code>brainshare_dev.commentary</code> table reference
     */
    public TCommentary() {
        this("commentary", null);
    }

    /**
     * Create an aliased <code>brainshare_dev.commentary</code> table reference
     */
    public TCommentary(String alias) {
        this(alias, COMMENTARY);
    }

    private TCommentary(String alias, Table<RCommentaryRecord> aliased) {
        this(alias, aliased, null);
    }

    private TCommentary(String alias, Table<RCommentaryRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * The class holding records for this type
     */
    @Override
    public Class<RCommentaryRecord> getRecordType() {
        return RCommentaryRecord.class;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return BrainshareDev.BRAINSHARE_DEV;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<RCommentaryRecord, ULong> getIdentity() {
        return Keys.IDENTITY_COMMENTARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<RCommentaryRecord> getPrimaryKey() {
        return Keys.KEY_COMMENTARY_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<RCommentaryRecord>> getKeys() {
        return Arrays.<UniqueKey<RCommentaryRecord>>asList(Keys.KEY_COMMENTARY_PRIMARY, Keys.KEY_COMMENTARY_CONTENT_DATA_UNIQUE);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<RCommentaryRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<RCommentaryRecord, ?>>asList(Keys.FK_COMMENTARY_AUTHOR_USER_ID, Keys.FK_COMMENTARY_MATERIAL_ID, Keys.FK_COMMENTARY_POSSIBLE_PARENT_COMMENTARY_ID, Keys.FK_COMMENTARY_COMMENTARY_CONTENT_DATA);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TCommentary as(String alias) {
        return new TCommentary(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public TCommentary rename(String name) {
        return new TCommentary(name, null);
    }
}
