/*
 * This file is generated by jOOQ.
*/
package ua.ddovgal.brainshareApi.jooq.tables;


import org.jooq.*;
import org.jooq.impl.TableImpl;
import org.jooq.types.ULong;
import ua.ddovgal.brainshareApi.jooq.BrainshareDev;
import ua.ddovgal.brainshareApi.jooq.Keys;
import ua.ddovgal.brainshareApi.jooq.tables.records.RContentDataRecord;

import javax.annotation.Generated;
import java.util.Arrays;
import java.util.List;


/**
 * This class is generated by jOOQ.
 */
@Generated(
        value = {
                "http://www.jooq.org",
                "jOOQ version:3.9.1"
        },
        comments = "This class is generated by jOOQ"
)
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class TContentData extends TableImpl<RContentDataRecord> {

    /**
     * The reference instance of <code>brainshare_dev.content_data</code>
     */
    public static final TContentData CONTENT_DATA = new TContentData();
    private static final long serialVersionUID = 838672940;
    /**
     * The column <code>brainshare_dev.content_data.id</code>.
     */
    public final TableField<RContentDataRecord, ULong> ID = createField("id", org.jooq.impl.SQLDataType.BIGINTUNSIGNED.nullable(false), this, "");
    /**
     * The column <code>brainshare_dev.content_data.data_json</code>.
     */
    public final TableField<RContentDataRecord, Object> DATA_JSON = createField("data_json", org.jooq.impl.DefaultDataType.getDefaultDataType("json"), this, "");

    /**
     * Create a <code>brainshare_dev.content_data</code> table reference
     */
    public TContentData() {
        this("content_data", null);
    }

    /**
     * Create an aliased <code>brainshare_dev.content_data</code> table reference
     */
    public TContentData(String alias) {
        this(alias, CONTENT_DATA);
    }

    private TContentData(String alias, Table<RContentDataRecord> aliased) {
        this(alias, aliased, null);
    }

    private TContentData(String alias, Table<RContentDataRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * The class holding records for this type
     */
    @Override
    public Class<RContentDataRecord> getRecordType() {
        return RContentDataRecord.class;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return BrainshareDev.BRAINSHARE_DEV;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<RContentDataRecord, ULong> getIdentity() {
        return Keys.IDENTITY_CONTENT_DATA;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<RContentDataRecord> getPrimaryKey() {
        return Keys.KEY_CONTENT_DATA_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<RContentDataRecord>> getKeys() {
        return Arrays.<UniqueKey<RContentDataRecord>>asList(Keys.KEY_CONTENT_DATA_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TContentData as(String alias) {
        return new TContentData(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public TContentData rename(String name) {
        return new TContentData(name, null);
    }
}
